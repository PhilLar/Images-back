// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PhilLar/Images-back/handlers (interfaces: FilesStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFilesStore is a mock of FilesStore interface
type MockFilesStore struct {
	ctrl     *gomock.Controller
	recorder *MockFilesStoreMockRecorder
}

// MockFilesStoreMockRecorder is the mock recorder for MockFilesStore
type MockFilesStoreMockRecorder struct {
	mock *MockFilesStore
}

// NewMockFilesStore creates a new mock instance
func NewMockFilesStore(ctrl *gomock.Controller) *MockFilesStore {
	mock := &MockFilesStore{ctrl: ctrl}
	mock.recorder = &MockFilesStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilesStore) EXPECT() *MockFilesStoreMockRecorder {
	return m.recorder
}

// SaveImage mocks base method
func (m *MockFilesStore) SaveImage(arg0 *multipart.FileHeader, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveImage indicates an expected call of SaveImage
func (mr *MockFilesStoreMockRecorder) SaveImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockFilesStore)(nil).SaveImage), arg0, arg1)
}
